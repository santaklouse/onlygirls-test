<?php

namespace Database\Factories;

use App\Models\OfUser;
use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends Factory<OfUser>
 */
class OfUserFactory extends Factory
{
    protected $model = OfUser::class;

    public function definition(): array
    {
        return [
            'name' => fake()->name,
            'username' => fake()->userName,
            'about' => fake()->paragraph,
            'short_about' => fake()->text(5000),
            'raw_about' => fake()->text,
            'avatar' => fake()->imageUrl(400, 400, 'people'),
            'avatar_thumbs' => json_encode([
                'small' => fake()->imageUrl(100, 100, 'people'),
                'medium' => fake()->imageUrl(200, 200, 'people'),
                'large' => fake()->imageUrl(400, 400, 'people'),
            ]),
            'header' => fake()->imageUrl(800, 600, 'abstract'),
            'header_size' => json_encode(['width' => 800, 'height' => 600]),
            'header_thumbs' => json_encode([
                'small' => fake()->imageUrl(400, 300, 'abstract'),
                'medium' => fake()->imageUrl(600, 450, 'abstract'),
            ]),
            'can_add_subscriber' => fake()->boolean,
            'can_earn' => fake()->boolean,
            'can_pay_internal' => fake()->boolean,
            'can_receive_chat_message' => fake()->boolean,
            'can_trial_send' => fake()->boolean,
            'free_trial_link' => fake()->url,
            'favorited_count' => fake()->numberBetween(0, 1000),
            'favorites_count' => fake()->numberBetween(0, 1000),
            'has_friends' => fake()->boolean,
            'has_stories' => fake()->boolean,
            'has_stream' => fake()->boolean,
            'has_scheduled_stream' => fake()->boolean,
            'has_not_viewed_story' => fake()->boolean,
            'has_labels' => fake()->boolean,
            'has_links' => fake()->boolean,
            'is_adult_content' => fake()->boolean,
            'is_blocked' => fake()->boolean,
            'is_performer' => fake()->boolean,
            'is_real_performer' => fake()->boolean,
            'is_private_restiction' => fake()->boolean,
            'is_verified' => fake()->boolean,
            'is_restricted' => fake()->boolean,
            'is_friend' => fake()->boolean,
            'join_date' => fake()->unixTime,
            'last_seen' => fake()->unixTime,
            'location' => fake()->city,
            'min_payout_summ' => fake()->numberBetween(100, 1000),
            'photos_count' => fake()->numberBetween(0, 100),
            'medias_count' => fake()->numberBetween(0, 100),
            'posts_count' => fake()->numberBetween(0, 100),
            'private_archived_posts_count' => fake()->numberBetween(0, 100),
            'archived_post_count' => fake()->numberBetween(0, 100),
            'has_pinned_posts' => fake()->boolean,
            'show_posts_in_feed' => fake()->boolean,
            'show_subscribers_count' => fake()->boolean,
            'subscribers_count' => fake()->numberBetween(0, 1000),
            'show_media_count' => fake()->boolean,
            'subscribe_price' => fake()->randomFloat(2, 0, 100),
            'subscription_bundles' => json_encode(fake()->words(3)),
            'unprofitable' => fake()->boolean,
            'subscribed_by' => fake()->boolean,
            'subscribed_by_expire' => fake()->dateTime,
            'subscribed_by_expire_date' => fake()->date,
            'subscribed_by_autoprolong' => fake()->boolean,
            'subscribed_is_expired_now' => fake()->boolean,
            'current_subscribe_price' => fake()->numberBetween(1, 100),
            'subscribed_on' => fake()->boolean,
            'subscribed_on_expired_now' => fake()->boolean,
            'subscribed_on_duration' => fake()->time,
            'call_price' => fake()->numberBetween(1, 100),
            'subscribed_by_data' => fake()->word,
            'subscribed_on_data' => fake()->word,
            'tips_enabled' => fake()->boolean,
            'tips_text_enabled' => fake()->boolean,
            'tips_max' => fake()->numberBetween(0, 1000),
            'tips_min' => fake()->numberBetween(0, 100),
            'tips_min_internal' => fake()->numberBetween(0, 100),
            'videos_count' => fake()->numberBetween(0, 100),
            'website' => fake()->url,
            'wishlist' => fake()->url,
            'date_add' => fake()->unixTime,
            'date_last_online' => fake()->unixTime,
            'credits_min' => fake()->numberBetween(0, 1000),
            'credits_max' => fake()->numberBetween(0, 1000),
            'has_stripe' => fake()->boolean,
            'is_referrer_allowed' => fake()->boolean,
            'is_spotify_connected' => fake()->boolean,
            'is_spring_connected' => fake()->boolean,
            'referal_bonus_summ_for_referer' => fake()->numberBetween(0, 1000),
            'should_show_finished_streams' => fake()->boolean,
            'finished_streams_count' => fake()->numberBetween(0, 100),
            'has_saved_streams' => fake()->boolean,
            'first_published_post_date' => fake()->dateTime,
            'can_report' => fake()->boolean,
            'can_look_story' => fake()->boolean,
            'can_comment_story' => fake()->boolean,
            'can_restrict' => fake()->boolean,
            'can_chat' => fake()->boolean,
            'can_promotion' => fake()->boolean,
            'promotions' => json_encode(fake()->words(3)),
            'can_create_promotion' => fake()->boolean,
            'can_create_trial' => fake()->boolean,
            'last_seen_diff' => fake()->unixTime,
            'send_invites' => fake()->numberBetween(0, 100),
            'date_published' => fake()->dateTime,
            'created_at' => now(),
            'updated_at' => now(),
            'deleted' => fake()->boolean,
            'is_indexed' => fake()->boolean,
            'index_date' => fake()->dateTime,
            'onlymodels_sent' => fake()->boolean,
            'priority' => fake()->numberBetween(1, 100),
        ];
    }
}
